module snn_layer (
    input  wire clk,
    input  wire rst_n,

    // 1. 테스트벤치 친화적인 개별 입력 포트
    input  wire signed [15:0] imu_accel_x,
    input  wire signed [15:0] imu_accel_y,
    input  wire signed [15:0] imu_accel_z,
    input  wire signed [15:0] imu_gyro_x,
    input  wire signed [15:0] imu_gyro_y,
    input  wire signed [15:0] imu_gyro_z,

    // 출력 포트 (기존과 동일)
    output reg signed [15:0] weighted_data_out,
    output reg [2:0]          spike_order_out
);

    // 2. 효율적인 내부 로직을 위한 와이어 버스 선언
    wire signed [15:0] imu_data_bus [0:5];

    // 3. 개별 포트와 내부 버스를 연결
    assign imu_data_bus[0] = imu_accel_x;
    assign imu_data_bus[1] = imu_accel_y;
    assign imu_data_bus[2] = imu_accel_z;
    assign imu_data_bus[3] = imu_gyro_x;
    assign imu_data_bus[4] = imu_gyro_y;
    assign imu_data_bus[5] = imu_gyro_z;

    // --- 내부 신호 선언 ---
    wire event_spike_out [0:5];   // derivative_node의 이벤트 스파이크 출력
    wire weight_update_en [0:5];  // 가중치 업데이트 활성화 신호
    wire signed [15:0] weight_update_val [0:5]; // 가중치 업데이트 값

    wire signed [15:0] neuron_spike_data [0:5]; // lif_neuron의 데이터 출력
    wire neuron_spiked [0:5];     // lif_neuron의 스파이크 발생 여부

    // --- 4. Derivative Node 인스턴스화 (내부 버스 사용) ---
    genvar i;
    generate
        for (i = 0; i < 6; i = i + 1) begin : gen_diff_nodes
            derivative_node u_diff (
                .clk(clk),
                .rst_n(rst_n),
                .data_in(imu_data_bus[i]),
                .event_spike_out(event_spike_out[i]),
                .weight_update_en(weight_update_en[i]),
                .weight_update_val(weight_update_val[i])
            );
        end
    endgenerate

    // --- 5. LIF Neuron 인스턴스화 (내부 버스 사용) ---
    genvar j;
    generate
        for (j = 0; j < 6; j = j + 1) begin : gen_lif_neurons
            lif_neuron u_lif (
                .clk(clk),
                .rst_n(rst_n),
                .data_in(imu_data_bus[j]),
                .weight_update_en(weight_update_en[j]),
                .weight_update_val(weight_update_val[j]),
                .spike_data_out(neuron_spike_data[j]),
                .spiked(neuron_spiked[j])
            );
        end
    endgenerate

    // --- 6. 출력 집계 로직 ---
    integer k;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            weighted_data_out <= 16'sd0;
            spike_order_out   <= 3'd0;
        end else begin
            weighted_data_out <= 16'sd0;

            for (k = 0; k < 6; k = k + 1) begin
                if (neuron_spiked[k]) begin
                    weighted_data_out <= neuron_spike_data[k];
                    spike_order_out   <= k;
                end
            end
        end
    end

endmodule